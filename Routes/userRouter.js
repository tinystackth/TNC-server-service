// Routes/userRouter.js - User Management API ‡∏û‡∏£‡πâ‡∏≠‡∏° Role-based Access Control
const express = require('express');
const router = express.Router();
const Parse = require('parse/node');

// üÜï Import middleware ‡πÉ‡∏´‡∏°‡πà (‡πÅ‡∏ó‡∏ô authenticateToken ‡πÄ‡∏î‡∏¥‡∏°)
const { requireAuth, checkPermissions, requireSuperAdmin, getUserRoles } = require('../middleware/auth');

// Helper function
const fail = (res, status, msg) =>
  res.status(status).json({ status, message: msg });

const isUrl = s => /^https?:\/\/.+/i.test(s);
const isEmail = s => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(s);

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/*  üìñ GET /api/users - ‡∏î‡∏π users ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î         */
/*  ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå: ‡∏ó‡∏∏‡∏Å role ‡∏ó‡∏µ‡πà login ‡πÅ‡∏•‡πâ‡∏ß (admin, developer, super_admin) */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
router.get('/users', requireAuth, checkPermissions('read'), async (req, res) => {
  console.log('üìã Users list endpoint called by:', req.user.get('username'));
  
  try {
    const { page = 1, limit = 10, search } = req.query;
    
    const userQuery = new Parse.Query(Parse.User);
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    if (search) {
      userQuery.contains('username', search);
    }
    
    // Pagination
    const skip = (page - 1) * limit;
    userQuery.skip(skip);
    userQuery.limit(parseInt(limit));
    
    // Select fields (‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤ sensitive data)
    userQuery.select(['username', 'email', 'firstname', 'lastname', 'phone', 'imageUrl', 'createdAt', 'updatedAt']);
    
    const users = await userQuery.find({ useMasterKey: true });
    const total = await userQuery.count({ useMasterKey: true });
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° roles
    const userData = [];
    for (const user of users) {
      const userRoles = await getUserRoles(user);
      userData.push({
        id: user.id,
        username: user.get('username'),
        email: user.get('email'),
        firstname: user.get('firstname'),
        lastname: user.get('lastname'),
        phone: user.get('phone'),
        imageUrl: user.get('imageUrl') || '',
        roles: userRoles, // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏° roles
        createdAt: user.get('createdAt'),
        updatedAt: user.get('updatedAt')
      });
    }
    
    console.log(`‚úÖ ${req.user.get('username')} (${req.userRoles.join(',')}) viewed ${users.length} users`);
    
    res.json({
      status: 200,
      message: 'Users fetched successfully',
      data: userData,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total: total,
        pages: Math.ceil(total / limit)
      },
      requestedBy: {
        username: req.user.get('username'),
        roles: req.userRoles // üÜï ‡πÅ‡∏™‡∏î‡∏á roles ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà request
      }
    });
  } catch (error) {
    console.error('‚ùå Error fetching users:', error);
    fail(res, 500, error.message);
  }
});

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/*  üìñ GET /api/user/:id - ‡∏î‡∏π user ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß       */
/*  ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå: ‡∏ó‡∏∏‡∏Å role ‡∏ó‡∏µ‡πà login ‡πÅ‡∏•‡πâ‡∏ß              */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
router.get('/user/:id', requireAuth, checkPermissions('read'), async (req, res) => {
  console.log('üë§ Get user by ID endpoint called:', req.params.id, 'by:', req.user.get('username'));
  
  try {
    const { id } = req.params;
    
    const userQuery = new Parse.Query(Parse.User);
    const user = await userQuery.get(id, { useMasterKey: true });
    
    if (!user) {
      return fail(res, 404, 'User not found');
    }
    
    // ‡∏´‡∏≤ roles ‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ
    const userRoles = await getUserRoles(user);
    
    console.log(`‚úÖ ${req.user.get('username')} viewed user ${user.get('username')}`);
    
    res.json({
      status: 200,
      message: 'User fetched successfully',
      data: {
        id: user.id,
        username: user.get('username'),
        email: user.get('email'),
        firstname: user.get('firstname'),
        lastname: user.get('lastname'),
        phone: user.get('phone'),
        imageUrl: user.get('imageUrl') || '',
        roles: userRoles, // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏° roles
        createdAt: user.get('createdAt'),
        updatedAt: user.get('updatedAt')
      },
      requestedBy: {
        username: req.user.get('username'),
        roles: req.userRoles
      }
    });
  } catch (error) {
    console.error('‚ùå Error fetching user:', error);
    const status = error.code === 101 ? 404 : 500;
    fail(res, status, error.code === 101 ? 'User not found' : error.message);
  }
});

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/*  ‚ûï POST /api/register - ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà       */
/*  ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå: ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ developer ‡πÅ‡∏•‡∏∞ super_admin     */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
router.post('/register', requireAuth, checkPermissions('create'), async (req, res) => {
  console.log('üìù Register endpoint called by:', req.user.get('username'), 'with body:', req.body);
  
  const {
    username,
    password,
    firstname = '',
    lastname = '',
    phone = '',
    email = '',
    imageUrl = '',
    roles = ['admin'], // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏° roles (default ‡πÄ‡∏õ‡πá‡∏ô admin)
    moreInfo = [],
    fileIds = []
  } = req.body;

  // Validation
  if (!username || !password) {
    return fail(res, 400, 'Username and password are required.');
  }
  if (!Array.isArray(fileIds)) {
    return fail(res, 400, 'fileIds must be an array.');
  }
  if (email && !isEmail(email)) {
    return fail(res, 400, 'Invalid email format');
  }
  if (imageUrl && !isUrl(imageUrl)) {
    return fail(res, 400, 'imageUrl must be a valid URL');
  }

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ username ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingUserQuery = new Parse.Query(Parse.User);
    existingUserQuery.equalTo('username', username);
    const existingUser = await existingUserQuery.first({ useMasterKey: true });
    
    if (existingUser) {
      return fail(res, 400, `Username '${username}' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà
    const user = new Parse.User();
    user.set('username', username);
    user.set('password', password);
    user.set('firstname', firstname);
    user.set('lastname', lastname);
    user.set('phone', phone);
    user.set('email', email);
    user.set('imageUrl', imageUrl);
    user.set('moreInfo', moreInfo);
    user.set('files', fileIds);

    const newUser = await user.signUp();

    // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏° roles ‡πÉ‡∏´‡πâ user ‡πÉ‡∏´‡∏°‡πà
    const addedRoles = [];
    for (const roleName of roles) {
      try {
        const roleQuery = new Parse.Query(Parse.Role);
        roleQuery.equalTo('name', roleName);
        const role = await roleQuery.first({ useMasterKey: true });
        
        if (role) {
          role.getUsers().add(newUser);
          await role.save(null, { useMasterKey: true });
          addedRoles.push(roleName);
          console.log(`‚úÖ Added user ${username} to role ${roleName}`);
        } else {
          console.warn(`‚ö†Ô∏è  Role ${roleName} not found`);
        }
      } catch (roleError) {
        console.error(`‚ùå Error adding role ${roleName}:`, roleError);
      }
    }

    console.log(`‚úÖ ${req.user.get('username')} created user ${username} with roles:`, addedRoles);

    res.json({
      status: 200,
      message: 'User registered successfully',
      data: {
        id: newUser.id,
        username: newUser.get('username'),
        email: newUser.get('email'),
        firstname: newUser.get('firstname'),
        lastname: newUser.get('lastname'),
        phone: newUser.get('phone'),
        imageUrl: newUser.get('imageUrl') || '',
        roles: addedRoles, // üÜï ‡πÅ‡∏™‡∏î‡∏á roles ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°
        files: newUser.get('files') || [],
        createdAt: newUser.get('createdAt')
      },
      createdBy: {
        username: req.user.get('username'),
        roles: req.userRoles
      }
    });
  } catch (err) { 
    console.error('‚ùå Register error:', err.message);
    fail(res, 400, err.message); 
  }
});

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/*  ‚úèÔ∏è PATCH /api/user/:id - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç user          */
/*  ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå: ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ developer ‡πÅ‡∏•‡∏∞ super_admin     */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
router.patch('/user/:id', requireAuth, checkPermissions('update'), async (req, res) => {
  console.log('‚úèÔ∏è Update user endpoint called:', req.params.id, 'by:', req.user.get('username'), req.body);
  
  const {
    addFiles = [],
    removeFiles = [],
    fileIds,
    roles, // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç roles
    ...restBody
  } = req.body;

  // Allow-list ‡∏Ç‡∏≠‡∏á field ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
  const ALLOWED_FIELDS = [
    'firstname',
    'lastname', 
    'phone',
    'email',
    'password',
    'imageUrl',
    'moreInfo',
    'username',
    'fileIds',
  ];

  const updates = {};
  for (const k of Object.keys(restBody)) {
    if (!ALLOWED_FIELDS.includes(k)) {
      return fail(res, 400, `Field "${k}" is not allowed`);
    }
    updates[k] = restBody[k];
  }

  // Validation
  if (updates.email && !isEmail(updates.email)) {
    return fail(res, 400, 'Invalid email format');
  }
  if (updates.imageUrl && !isUrl(updates.imageUrl)) {
    return fail(res, 400, 'imageUrl must be a valid URL');
  }
  if (updates.username && typeof updates.username !== 'string') {
    return fail(res, 400, 'username must be a string');
  }
  if (fileIds !== undefined && !Array.isArray(fileIds)) {
    return fail(res, 400, 'fileIds must be an array of File objectIds');
  }
  if (!Array.isArray(addFiles) || !Array.isArray(removeFiles)) {
    return fail(res, 400, 'addFiles/removeFiles must be arrays.');
  }

  try {
    const userQuery = new Parse.Query(Parse.User);
    const user = await userQuery.get(req.params.id, { useMasterKey: true });
    
    if (!user) {
      return fail(res, 404, 'User not found');
    }

    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    if (user.id === req.user.id) {
      return fail(res, 400, '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô API ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ');
    }

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    for (const [key, value] of Object.entries(updates)) {
      user.set(key, value);
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ files
    if (fileIds !== undefined) {
      user.set('files', fileIds);
    } else {
      let currentFiles = user.get('files') || [];
      currentFiles = currentFiles.concat(addFiles);
      currentFiles = currentFiles.filter(f => !removeFiles.includes(f));
      user.set('files', currentFiles);
    }

    await user.save(null, { useMasterKey: true });

    // üÜï ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç roles ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ super_admin)
    let updatedRoles = [];
    if (roles && Array.isArray(roles)) {
      const currentUserRoles = await getUserRoles(req.user);
      if (!currentUserRoles.includes('super_admin')) {
        return fail(res, 403, '‡πÄ‡∏â‡∏û‡∏≤‡∏∞ super_admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç roles ‡πÑ‡∏î‡πâ');
      }

      // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å roles ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const oldRoleQuery = new Parse.Query(Parse.Role);
      oldRoleQuery.equalTo('users', user);
      const oldRoles = await oldRoleQuery.find({ useMasterKey: true });
      
      for (const oldRole of oldRoles) {
        oldRole.getUsers().remove(user);
        await oldRole.save(null, { useMasterKey: true });
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ roles ‡πÉ‡∏´‡∏°‡πà
      for (const roleName of roles) {
        const roleQuery = new Parse.Query(Parse.Role);
        roleQuery.equalTo('name', roleName);
        const role = await roleQuery.first({ useMasterKey: true });
        
        if (role) {
          role.getUsers().add(user);
          await role.save(null, { useMasterKey: true });
          updatedRoles.push(roleName);
        }
      }
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á roles ‡∏°‡∏≤ ‡πÉ‡∏´‡πâ‡∏î‡∏π roles ‡πÄ‡∏î‡∏¥‡∏°
      updatedRoles = await getUserRoles(user);
    }

    console.log(`‚úÖ ${req.user.get('username')} updated user ${user.get('username')}`);

    res.json({
      status: 200,
      message: 'User updated successfully',
      data: {
        id: user.id,
        username: user.get('username'),
        email: user.get('email'),
        firstname: user.get('firstname'),
        lastname: user.get('lastname'),
        phone: user.get('phone'),
        imageUrl: user.get('imageUrl') || '',
        roles: updatedRoles, // üÜï ‡πÅ‡∏™‡∏î‡∏á roles ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        files: user.get('files') || [],
        updatedAt: user.get('updatedAt')
      },
      updatedBy: {
        username: req.user.get('username'),
        roles: req.userRoles
      }
    });
  } catch (err) { 
    console.error('‚ùå Update user error:', err.message);
    fail(res, 400, err.message); 
  }
});

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/*  üóëÔ∏è DELETE /api/user/:id - ‡∏•‡∏ö user            */
/*  ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå: ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ developer ‡πÅ‡∏•‡∏∞ super_admin     */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
router.delete('/user/:id', requireAuth, checkPermissions('delete'), async (req, res) => {
  console.log('üóëÔ∏è Delete user endpoint called:', req.params.id, 'by:', req.user.get('username'));
  
  try {
    const userQuery = new Parse.Query(Parse.User);
    const user = await userQuery.get(req.params.id, { useMasterKey: true });
    
    if (!user) {
      return fail(res, 404, 'User not found');
    }

    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    if (user.id === req.user.id) {
      return fail(res, 400, '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö user ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ');
    }
    
    const deletedUsername = user.get('username');
    
    // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å roles ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
    const roleQuery = new Parse.Query(Parse.Role);
    roleQuery.equalTo('users', user);
    const roles = await roleQuery.find({ useMasterKey: true });
    
    for (const role of roles) {
      role.getUsers().remove(user);
      await role.save(null, { useMasterKey: true });
    }
    
    // ‡∏•‡∏ö user
    await user.destroy({ useMasterKey: true });
    
    console.log(`‚úÖ ${req.user.get('username')} deleted user ${deletedUsername}`);
    
    res.json({
      status: 200,
      message: 'User deleted successfully',
      deletedUser: {
        id: req.params.id,
        username: deletedUsername
      },
      deletedBy: {
        username: req.user.get('username'),
        roles: req.userRoles
      }
    });
  } catch (err) { 
    console.error('‚ùå Delete user error:', err.message);
    fail(res, err.message === 'User not found' ? 404 : 500, err.message); 
  }
});

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/*  üîß POST /api/user/:id/roles - ‡πÄ‡∏û‡∏¥‡πà‡∏° role     */
/*  ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå: ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ super_admin                   */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
router.post('/user/:id/roles', requireAuth, requireSuperAdmin, async (req, res) => {
  console.log('üîß Add role endpoint called:', req.params.id, req.body, 'by:', req.user.get('username'));
  
  try {
    const { id } = req.params;
    const { roleName } = req.body;
    
    if (!roleName) {
      return fail(res, 400, '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ roleName');
    }
    
    // ‡∏´‡∏≤ user ‡πÅ‡∏•‡∏∞ role
    const userQuery = new Parse.Query(Parse.User);
    const user = await userQuery.get(id, { useMasterKey: true });
    
    const targetRoleQuery = new Parse.Query(Parse.Role);
    targetRoleQuery.equalTo('name', roleName);
    const role = await targetRoleQuery.first({ useMasterKey: true });
    
    if (!user || !role) {
      return fail(res, 404, '‡πÑ‡∏°‡πà‡∏û‡∏ö user ‡∏´‡∏£‡∏∑‡∏≠ role ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° user ‡πÄ‡∏Ç‡πâ‡∏≤ role
    role.getUsers().add(user);
    await role.save(null, { useMasterKey: true });
    
    console.log(`‚úÖ ${req.user.get('username')} added role ${roleName} to user ${user.get('username')}`);
    
    res.json({
      status: 200,
      message: `‡πÄ‡∏û‡∏¥‡πà‡∏° user ‡πÄ‡∏Ç‡πâ‡∏≤ role ${roleName} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
      data: {
        userId: user.id,
        username: user.get('username'),
        addedRole: roleName
      }
    });
  } catch (error) {
    console.error('‚ùå Error adding role:', error);
    fail(res, 500, error.message);
  }
});

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/*  LOGIN ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°                       */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
router.post('/login', async (req, res) => {
  console.log('üîê Login endpoint called with body:', req.body);
  
  const { username, password } = req.body;

  try {
    // Login ‡∏î‡πâ‡∏ß‡∏¢ Parse
    const user = await Parse.User.logIn(username, password);
    
    // üÜï ‡∏´‡∏≤ roles ‡∏Ç‡∏≠‡∏á user
    const userRoles = await getUserRoles(user);
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î permissions ‡∏ï‡∏≤‡∏° roles
    const permissions = {
      canCreate: userRoles.includes('super_admin') || userRoles.includes('developer'),
      canRead: userRoles.length > 0,
      canUpdate: userRoles.includes('super_admin') || userRoles.includes('developer'),
      canDelete: userRoles.includes('super_admin') || userRoles.includes('developer'),
      canManageRoles: userRoles.includes('super_admin')
    };
    
    console.log(`‚úÖ User ${username} logged in with roles:`, userRoles);
    
    res.json({
      status: 200,
      message: 'Login successful',
      data: {
        id: user.id,
        username: user.get('username'),
        email: user.get('email'),
        firstname: user.get('firstname'),
        lastname: user.get('lastname'),
        roles: userRoles, // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏° roles
        permissions: permissions, // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏° permissions
        sessionToken: user.getSessionToken(),
        files: user.get('files') || [],
        imageUrl: user.get('imageUrl') || '',
        loginAt: new Date().toISOString()
      },
    });
  } catch (err) { 
    console.error('‚ùå Login error:', err.message);
    fail(res, 400, err.message === 'Invalid username/password.' ? 
      'Username ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' : err.message); 
  }
});

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/*  ME - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á                          */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
router.get('/me', requireAuth, async (req, res) => {
  console.log('üë§ Me endpoint called by:', req.user.get('username'));
  
  try {
    const user = req.user;
    if (!user) return fail(res, 404, 'User not found.');

    // ‡∏´‡∏≤ roles ‡∏Ç‡∏≠‡∏á user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const userRoles = await getUserRoles(user);
    
    const permissions = {
      canCreate: userRoles.includes('super_admin') || userRoles.includes('developer'),
      canRead: userRoles.length > 0,
      canUpdate: userRoles.includes('super_admin') || userRoles.includes('developer'),
      canDelete: userRoles.includes('super_admin') || userRoles.includes('developer'),
      canManageRoles: userRoles.includes('super_admin')
    };

    res.json({
      status: 200,
      message: 'User info retrieved successfully',
      data: {
        id: user.id,
        username: user.get('username'),
        firstname: user.get('firstname'),
        lastname: user.get('lastname'),
        phone: user.get('phone'),
        email: user.get('email'),
        imageUrl: user.get('imageUrl') || '',
        roles: userRoles, // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏° roles
        permissions: permissions, // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏° permissions
        files: user.get('files') || [],
        lastLogin: user.get('updatedAt')
      },
    });
  } catch (error) {
    console.error('‚ùå Get current user error:', error);
    fail(res, 500, error.message);
  }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° test route
router.get('/test', (req, res) => {
  console.log('üß™ Test endpoint called');
  res.json({ 
    message: 'User router with Role-based Access Control is working!', 
    timestamp: new Date(),
    roleBasedEndpoints: {
      'GET /api/users': '‡∏ó‡∏∏‡∏Å role ‡∏ó‡∏µ‡πà login (admin, developer, super_admin)',
      'GET /api/user/:id': '‡∏ó‡∏∏‡∏Å role ‡∏ó‡∏µ‡πà login (admin, developer, super_admin)',
      'POST /api/register': '‡πÄ‡∏â‡∏û‡∏≤‡∏∞ developer ‡πÅ‡∏•‡∏∞ super_admin',
      'PATCH /api/user/:id': '‡πÄ‡∏â‡∏û‡∏≤‡∏∞ developer ‡πÅ‡∏•‡∏∞ super_admin',
      'DELETE /api/user/:id': '‡πÄ‡∏â‡∏û‡∏≤‡∏∞ developer ‡πÅ‡∏•‡∏∞ super_admin',
      'POST /api/user/:id/roles': '‡πÄ‡∏â‡∏û‡∏≤‡∏∞ super_admin',
      'POST /api/login': '‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á login (public)',
      'GET /api/me': '‡∏ó‡∏∏‡∏Å role ‡∏ó‡∏µ‡πà login'
    }
  });
});

console.log('‚úÖ userRouter with Role-based Access Control setup complete');
module.exports = router;