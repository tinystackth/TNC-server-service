// cloud/main.js - ‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå (‡πÑ‡∏°‡πà‡∏°‡∏µ user role)

console.log('üöÄ Loading Cloud Functions for Role Management...');

// ===================================
// Helper Functions
// ===================================

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role ‡∏Ç‡∏≠‡∏á user
const getUserRoles = async (user) => {
  try {
    const roleQuery = new Parse.Query(Parse.Role);
    roleQuery.equalTo('users', user);
    const roles = await roleQuery.find({ useMasterKey: true });
    return roles.map(role => role.get('name'));
  } catch (error) {
    console.error('Error getting user roles:', error);
    return [];
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏°‡∏µ permission ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
const hasPermission = (userRoles, requiredPermission) => {
  if (requiredPermission === 'read') {
    return userRoles.length > 0; // ‡∏ó‡∏∏‡∏Å role ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ read ‡πÑ‡∏î‡πâ
  } else if (['create', 'update', 'delete'].includes(requiredPermission)) {
    return userRoles.includes('super_admin') || userRoles.includes('developer');
  } else if (requiredPermission === 'manage_roles') {
    return userRoles.includes('super_admin');
  }
  return false;
};

// Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö permissions ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ role
const getRolePermissions = (roleName) => {
  const permissions = {
    'super_admin': {
      create: true,
      read: true,
      update: true,
      delete: true,
      manageRoles: true,
      manageUsers: true,
      level: 3,
      description: '‡πÄ‡∏à‡πâ‡∏≤‡∏ô‡∏≤‡∏¢ - ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ roles'
    },
    'developer': {
      create: true,
      read: true,
      update: true,
      delete: true,
      manageRoles: false,
      manageUsers: true,
      level: 2,
      description: '‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤ - CRUD users ‡πÑ‡∏î‡πâ‡∏´‡∏°‡∏î ‡πÅ‡∏ï‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ roles ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ'
    },
    'admin': {
      create: false,
      read: true,
      update: false,
      delete: false,
      manageRoles: false,
      manageUsers: false,
      level: 1,
      description: '‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô - ‡∏î‡∏π users ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (role ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î)'
    }
  };
  
  return permissions[roleName] || {
    create: false,
    read: false,
    update: false,
    delete: false,
    manageRoles: false,
    manageUsers: false,
    level: 0,
    description: 'Role ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå'
  };
};

// ===================================
// User Management Functions
// ===================================

// üîç Cloud Function: ‡∏´‡∏≤ User IDs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
Parse.Cloud.define('getUserIds', async (request) => {
  try {
    console.log('üîç Getting all user IDs...');
    
    const userQuery = new Parse.Query(Parse.User);
    const users = await userQuery.find({ useMasterKey: true });
    
    const userData = [];
    
    for (const user of users) {
      const userRoles = await getUserRoles(user);
      const permissions = userRoles.length > 0 ? getRolePermissions(userRoles[0]) : getRolePermissions('unknown');
      
      userData.push({
        id: user.id,
        username: user.get('username'),
        email: user.get('email') || '‡πÑ‡∏°‡πà‡∏°‡∏µ email',
        firstname: user.get('firstname') || '',
        lastname: user.get('lastname') || '',
        phone: user.get('phone') || '',
        roles: userRoles,
        permissions: permissions,
        createdAt: user.get('createdAt'),
        updatedAt: user.get('updatedAt')
      });
    }
    
    console.log(`‚úÖ Found ${users.length} users in system`);
    
    return {
      success: true,
      message: `‡∏û‡∏ö ${users.length} users ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`,
      data: userData,
      totalUsers: users.length,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('‚ùå Error getting user IDs:', error);
    throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, error.message);
  }
});

// üìä Cloud Function: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role ‡∏Ç‡∏≠‡∏á user
Parse.Cloud.define('checkUserRole', async (request) => {
  const { user } = request;
  
  if (!user) {
    throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, '‡∏ï‡πâ‡∏≠‡∏á login ‡∏Å‡πà‡∏≠‡∏ô');
  }
  
  try {
    const roles = await getUserRoles(user);
    
    return {
      success: true,
      data: {
        userId: user.id,
        username: user.get('username'),
        email: user.get('email'),
        firstname: user.get('firstname'),
        lastname: user.get('lastname'),
        roles: roles,
        permissions: {
          canCreate: hasPermission(roles, 'create'),
          canRead: hasPermission(roles, 'read'),
          canUpdate: hasPermission(roles, 'update'),
          canDelete: hasPermission(roles, 'delete'),
          canManageRoles: hasPermission(roles, 'manage_roles')
        },
        roleDetails: roles.map(roleName => getRolePermissions(roleName)),
        timestamp: new Date().toISOString()
      }
    };
  } catch (error) {
    console.error('‚ùå Error checking user roles:', error);
    throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, 'Error checking user roles');
  }
});

// ===================================
// Role Management Functions
// ===================================

// üÜï Cloud Function: ‡∏™‡∏£‡πâ‡∏≤‡∏á role ‡πÉ‡∏´‡∏°‡πà
Parse.Cloud.define('createRole', async (request) => {
  const { roleName } = request.params;
  
  if (!roleName) {
    throw new Parse.Error(Parse.Error.INVALID_QUERY, '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ roleName');
  }
  
  try {
    console.log(`üîß Creating new role: ${roleName}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ role ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingRoleQuery = new Parse.Query(Parse.Role);
    existingRoleQuery.equalTo('name', roleName);
    const existingRole = await existingRoleQuery.first({ useMasterKey: true });
    
    if (existingRole) {
      return {
        success: false,
        message: `Role '${roleName}' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`,
        data: {
          roleId: existingRole.id,
          roleName: existingRole.get('name'),
          permissions: getRolePermissions(roleName)
        }
      };
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á role ‡πÉ‡∏´‡∏°‡πà
    const newRole = new Parse.Role(roleName, new Parse.ACL());
    await newRole.save(null, { useMasterKey: true });
    
    console.log(`‚úÖ Created new role: ${roleName} with ID: ${newRole.id}`);
    
    return {
      success: true,
      message: `‡∏™‡∏£‡πâ‡∏≤‡∏á role '${roleName}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
      data: {
        roleId: newRole.id,
        roleName: newRole.get('name'),
        permissions: getRolePermissions(roleName),
        createdAt: newRole.get('createdAt')
      }
    };
  } catch (error) {
    console.error('‚ùå Error creating role:', error);
    throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, error.message);
  }
});

// üìã Cloud Function: ‡∏î‡∏π roles ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞ users ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ role
Parse.Cloud.define('getAllRoles', async (request) => {
  try {
    console.log('üìã Getting all roles and their users...');
    
    const roleQuery = new Parse.Query(Parse.Role);
    const roles = await roleQuery.find({ useMasterKey: true });
    
    const roleData = [];
    
    for (const role of roles) {
      const roleName = role.get('name');
      
      // ‡∏î‡∏∂‡∏á users ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô role ‡∏ô‡∏µ‡πâ
      const usersRelation = role.getUsers();
      const relatedUsers = await usersRelation.query().find({ useMasterKey: true });
      
      roleData.push({
        roleId: role.id,
        roleName: roleName,
        userCount: relatedUsers.length,
        users: relatedUsers.map(user => ({
          id: user.id,
          username: user.get('username'),
          email: user.get('email') || '',
          firstname: user.get('firstname') || '',
          lastname: user.get('lastname') || '',
          phone: user.get('phone') || '',
          createdAt: user.get('createdAt')
        })),
        permissions: getRolePermissions(roleName),
        createdAt: role.get('createdAt'),
        updatedAt: role.get('updatedAt')
      });
    }
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° level (super_admin -> developer -> admin)
    roleData.sort((a, b) => b.permissions.level - a.permissions.level);
    
    console.log(`‚úÖ Found ${roles.length} roles in system`);
    
    return {
      success: true,
      message: `‡∏û‡∏ö ${roles.length} roles ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`,
      data: {
        totalRoles: roles.length,
        roles: roleData,
        hierarchy: [
          'super_admin (Level 3)',
          'developer (Level 2)', 
          'admin (Level 1 - ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î)'
        ]
      },
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('‚ùå Error getting all roles:', error);
    throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, error.message);
  }
});

// üîß Cloud Function: ‡πÄ‡∏û‡∏¥‡πà‡∏° user ‡πÄ‡∏Ç‡πâ‡∏≤ role
Parse.Cloud.define('addUserToRole', async (request) => {
  const { userId, roleName } = request.params;
  
  if (!userId || !roleName) {
    throw new Parse.Error(Parse.Error.INVALID_QUERY, '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ userId ‡πÅ‡∏•‡∏∞ roleName');
  }
  
  try {
    console.log(`üîß Adding user ${userId} to role ${roleName}`);
    
    // ‡∏´‡∏≤ role
    const roleQuery = new Parse.Query(Parse.Role);
    roleQuery.equalTo('name', roleName);
    const role = await roleQuery.first({ useMasterKey: true });
    
    if (!role) {
      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `‡πÑ‡∏°‡πà‡∏û‡∏ö role ‡∏ä‡∏∑‡πà‡∏≠ ${roleName}`);
    }
    
    // ‡∏´‡∏≤ user
    const user = await new Parse.Query(Parse.User).get(userId, { useMasterKey: true });
    
    if (!user) {
      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `‡πÑ‡∏°‡πà‡∏û‡∏ö user ID ${userId}`);
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô role ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const existingUsersQuery = role.getUsers().query();
    existingUsersQuery.equalTo('objectId', userId);
    const existingUser = await existingUsersQuery.first({ useMasterKey: true });
    
    if (existingUser) {
      return {
        success: false,
        message: `${user.get('username')} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô role ${roleName} ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`,
        data: {
          userId: user.id,
          username: user.get('username'),
          roleName: roleName,
          permissions: getRolePermissions(roleName)
        }
      };
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° user ‡πÄ‡∏Ç‡πâ‡∏≤ role
    role.getUsers().add(user);
    await role.save(null, { useMasterKey: true });
    
    console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° ${user.get('username')} ‡πÄ‡∏Ç‡πâ‡∏≤ role ${roleName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    
    return { 
      success: true, 
      message: `‡πÄ‡∏û‡∏¥‡πà‡∏° ${user.get('username')} ‡πÄ‡∏Ç‡πâ‡∏≤ role ${roleName} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
      data: {
        userId: user.id,
        username: user.get('username'),
        email: user.get('email'),
        firstname: user.get('firstname'),
        lastname: user.get('lastname'),
        roleName: roleName,
        permissions: getRolePermissions(roleName),
        timestamp: new Date().toISOString()
      }
    };
  } catch (error) {
    console.error('‚ùå Error adding user to role:', error);
    throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, error.message);
  }
});

// üóëÔ∏è Cloud Function: ‡∏•‡∏ö user ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å role
Parse.Cloud.define('removeUserFromRole', async (request) => {
  const { userId, roleName } = request.params;
  
  if (!userId || !roleName) {
    throw new Parse.Error(Parse.Error.INVALID_QUERY, '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ userId ‡πÅ‡∏•‡∏∞ roleName');
  }
  
  try {
    console.log(`üóëÔ∏è Removing user ${userId} from role ${roleName}`);
    
    // ‡∏´‡∏≤ role
    const roleQuery = new Parse.Query(Parse.Role);
    roleQuery.equalTo('name', roleName);
    const role = await roleQuery.first({ useMasterKey: true });
    
    if (!role) {
      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `‡πÑ‡∏°‡πà‡∏û‡∏ö role ‡∏ä‡∏∑‡πà‡∏≠ ${roleName}`);
    }
    
    // ‡∏´‡∏≤ user
    const user = await new Parse.Query(Parse.User).get(userId, { useMasterKey: true });
    
    if (!user) {
      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `‡πÑ‡∏°‡πà‡∏û‡∏ö user ID ${userId}`);
    }
    
    // ‡∏•‡∏ö user ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å role
    role.getUsers().remove(user);
    await role.save(null, { useMasterKey: true });
    
    console.log(`‚úÖ ‡∏•‡∏ö ${user.get('username')} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å role ${roleName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    
    return { 
      success: true, 
      message: `‡∏•‡∏ö ${user.get('username')} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å role ${roleName} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
      data: {
        userId: user.id,
        username: user.get('username'),
        roleName: roleName,
        timestamp: new Date().toISOString()
      }
    };
  } catch (error) {
    console.error('‚ùå Error removing user from role:', error);
    throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, error.message);
  }
});

// üîÑ Cloud Function: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role ‡∏Ç‡∏≠‡∏á user
Parse.Cloud.define('changeUserRole', async (request) => {
  const { userId, oldRoleName, newRoleName } = request.params;
  
  if (!userId || !oldRoleName || !newRoleName) {
    throw new Parse.Error(Parse.Error.INVALID_QUERY, '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ userId, oldRoleName ‡πÅ‡∏•‡∏∞ newRoleName');
  }
  
  try {
    console.log(`üîÑ Changing user ${userId} role from ${oldRoleName} to ${newRoleName}`);
    
    // ‡∏´‡∏≤ user
    const user = await new Parse.Query(Parse.User).get(userId, { useMasterKey: true });
    
    if (!user) {
      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `‡πÑ‡∏°‡πà‡∏û‡∏ö user ID ${userId}`);
    }
    
    // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å role ‡πÄ‡∏î‡∏¥‡∏°
    if (oldRoleName !== 'none') {
      const oldRoleQuery = new Parse.Query(Parse.Role);
      oldRoleQuery.equalTo('name', oldRoleName);
      const oldRole = await oldRoleQuery.first({ useMasterKey: true });
      
      if (oldRole) {
        oldRole.getUsers().remove(user);
        await oldRole.save(null, { useMasterKey: true });
      }
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ role ‡πÉ‡∏´‡∏°‡πà
    const newRoleQuery = new Parse.Query(Parse.Role);
    newRoleQuery.equalTo('name', newRoleName);
    const newRole = await newRoleQuery.first({ useMasterKey: true });
    
    if (!newRole) {
      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `‡πÑ‡∏°‡πà‡∏û‡∏ö role ‡∏ä‡∏∑‡πà‡∏≠ ${newRoleName}`);
    }
    
    newRole.getUsers().add(user);
    await newRole.save(null, { useMasterKey: true });
    
    console.log(`‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role ‡∏Ç‡∏≠‡∏á ${user.get('username')} ‡∏à‡∏≤‡∏Å ${oldRoleName} ‡πÄ‡∏õ‡πá‡∏ô ${newRoleName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    
    return {
      success: true,
      message: `‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role ‡∏Ç‡∏≠‡∏á ${user.get('username')} ‡∏à‡∏≤‡∏Å ${oldRoleName} ‡πÄ‡∏õ‡πá‡∏ô ${newRoleName} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
      data: {
        userId: user.id,
        username: user.get('username'),
        email: user.get('email'),
        oldRole: oldRoleName,
        newRole: newRoleName,
        oldPermissions: getRolePermissions(oldRoleName),
        newPermissions: getRolePermissions(newRoleName),
        timestamp: new Date().toISOString()
      }
    };
  } catch (error) {
    console.error('‚ùå Error changing user role:', error);
    throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, error.message);
  }
});

// üßπ Cloud Function: ‡∏•‡πâ‡∏≤‡∏á roles ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á user
Parse.Cloud.define('clearUserRoles', async (request) => {
  const { userId } = request.params;
  
  if (!userId) {
    throw new Parse.Error(Parse.Error.INVALID_QUERY, '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ userId');
  }
  
  try {
    console.log(`üßπ Clearing all roles for user ${userId}`);
    
    // ‡∏´‡∏≤ user
    const user = await new Parse.Query(Parse.User).get(userId, { useMasterKey: true });
    
    if (!user) {
      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `‡πÑ‡∏°‡πà‡∏û‡∏ö user ID ${userId}`);
    }
    
    // ‡∏´‡∏≤ roles ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà user ‡∏≠‡∏¢‡∏π‡πà
    const roleQuery = new Parse.Query(Parse.Role);
    roleQuery.equalTo('users', user);
    const userRoles = await roleQuery.find({ useMasterKey: true });
    
    const removedRoles = [];
    
    // ‡∏•‡∏ö user ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å roles ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    for (const role of userRoles) {
      role.getUsers().remove(user);
      await role.save(null, { useMasterKey: true });
      removedRoles.push(role.get('name'));
    }
    
    console.log(`‚úÖ ‡∏•‡πâ‡∏≤‡∏á roles ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á ${user.get('username')} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    
    return {
      success: true,
      message: `‡∏•‡πâ‡∏≤‡∏á roles ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á ${user.get('username')} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
      data: {
        userId: user.id,
        username: user.get('username'),
        removedRoles: removedRoles,
        removedCount: removedRoles.length,
        timestamp: new Date().toISOString()
      }
    };
  } catch (error) {
    console.error('‚ùå Error clearing user roles:', error);
    throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, error.message);
  }
});

// üìä Cloud Function: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ role
Parse.Cloud.define('getUsersWithoutRoles', async (request) => {
  try {
    console.log('üìä Finding users without roles...');
    
    const userQuery = new Parse.Query(Parse.User);
    const allUsers = await userQuery.find({ useMasterKey: true });
    
    const usersWithoutRoles = [];
    
    for (const user of allUsers) {
      const userRoles = await getUserRoles(user);
      if (userRoles.length === 0) {
        usersWithoutRoles.push({
          id: user.id,
          username: user.get('username'),
          email: user.get('email') || '',
          firstname: user.get('firstname') || '',
          lastname: user.get('lastname') || '',
          phone: user.get('phone') || '',
          createdAt: user.get('createdAt'),
          suggestion: '‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ admin role (role ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î)'
        });
      }
    }
    
    console.log(`‚úÖ Found ${usersWithoutRoles.length} users without roles`);
    
    return {
      success: true,
      message: `‡∏û‡∏ö ${usersWithoutRoles.length} users ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ role`,
      data: {
        totalUsersWithoutRoles: usersWithoutRoles.length,
        users: usersWithoutRoles,
        recommendation: usersWithoutRoles.length > 0 ? 
          '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° users ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤ admin role (role ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î)' : 
          '‡∏ó‡∏∏‡∏Å users ‡∏°‡∏µ role ‡πÅ‡∏•‡πâ‡∏ß'
      },
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('‚ùå Error finding users without roles:', error);
    throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, error.message);
  }
});

// üîß Cloud Function: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ roles ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ users ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
Parse.Cloud.define('setupInitialRoles', async (request) => {
  try {
    console.log('üîß Setting up initial roles for all users...');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ roles ‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (‡πÄ‡∏≠‡∏≤ 'user' ‡∏≠‡∏≠‡∏Å)
    const requiredRoles = ['super_admin', 'developer', 'admin'];
    const createdRoles = [];
    
    for (const roleName of requiredRoles) {
      const roleQuery = new Parse.Query(Parse.Role);
      roleQuery.equalTo('name', roleName);
      const existingRole = await roleQuery.first({ useMasterKey: true });
      
      if (!existingRole) {
        const newRole = new Parse.Role(roleName, new Parse.ACL());
        await newRole.save(null, { useMasterKey: true });
        createdRoles.push(roleName);
        console.log(`‚úÖ Created role: ${roleName}`);
      }
    }
    
    return {
      success: true,
      message: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ roles ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
      data: {
        requiredRoles: requiredRoles,
        createdRoles: createdRoles,
        alreadyExisted: requiredRoles.filter(r => !createdRoles.includes(r)),
        hierarchy: {
          'admin': 'Level 1 (‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î) - ‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß',
          'developer': 'Level 2 - CRUD ‡πÑ‡∏î‡πâ‡∏´‡∏°‡∏î',
          'super_admin': 'Level 3 (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î) - ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏´‡∏°‡∏î + ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ roles'
        }
      },
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('‚ùå Error setting up initial roles:', error);
    throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, error.message);
  }
});

// üóëÔ∏è Cloud Function: ‡∏•‡∏ö role ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
Parse.Cloud.define('deleteRole', async (request) => {
  const { roleName } = request.params;
  
  if (!roleName) {
    throw new Parse.Error(Parse.Error.INVALID_QUERY, '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ roleName');
  }
  
  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö roles ‡∏´‡∏•‡∏±‡∏Å
  const protectedRoles = ['super_admin', 'developer', 'admin'];
  if (protectedRoles.includes(roleName)) {
    throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö role ${roleName} ‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô role ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö`);
  }
  
  try {
    console.log(`üóëÔ∏è Deleting role: ${roleName}`);
    
    // ‡∏´‡∏≤ role
    const roleQuery = new Parse.Query(Parse.Role);
    roleQuery.equalTo('name', roleName);
    const role = await roleQuery.first({ useMasterKey: true });
    
    if (!role) {
      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `‡πÑ‡∏°‡πà‡∏û‡∏ö role ‡∏ä‡∏∑‡πà‡∏≠ ${roleName}`);
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ users ‡πÉ‡∏ô role ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const usersInRole = await role.getUsers().query().count({ useMasterKey: true });
    
    if (usersInRole > 0) {
      throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö role ${roleName} ‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ ${usersInRole} users ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô role ‡∏ô‡∏µ‡πâ`);
    }
    
    // ‡∏•‡∏ö role
    await role.destroy({ useMasterKey: true });
    
    console.log(`‚úÖ ‡∏•‡∏ö role ${roleName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    
    return {
      success: true,
      message: `‡∏•‡∏ö role ${roleName} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
      data: {
        deletedRole: roleName,
        timestamp: new Date().toISOString()
      }
    };
  } catch (error) {
    console.error('‚ùå Error deleting role:', error);
    throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, error.message);
  }
});

// ===================================
// System Information Functions
// ===================================

// üìä Cloud Function: ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö
Parse.Cloud.define('getSystemStats', async (request) => {
  try {
    console.log('üìä Getting system statistics...');
    
    // ‡∏ô‡∏±‡∏ö users
    const userQuery = new Parse.Query(Parse.User);
    const totalUsers = await userQuery.count({ useMasterKey: true });
    
    // ‡∏ô‡∏±‡∏ö roles
    const roleQuery = new Parse.Query(Parse.Role);
    const totalRoles = await roleQuery.count({ useMasterKey: true });
    
    // ‡∏ô‡∏±‡∏ö users ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ role
    const roles = await roleQuery.find({ useMasterKey: true });
    const roleStats = [];
    
    for (const role of roles) {
      const usersInRole = await role.getUsers().query().count({ useMasterKey: true });
      roleStats.push({
        roleName: role.get('name'),
        userCount: usersInRole,
        permissions: getRolePermissions(role.get('name')),
        percentage: totalUsers > 0 ? ((usersInRole / totalUsers) * 100).toFixed(1) + '%' : '0%'
      });
    }
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° level
    roleStats.sort((a, b) => b.permissions.level - a.permissions.level);
    
    // ‡∏´‡∏≤ users ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ role
    const allUsers = await userQuery.find({ useMasterKey: true });
    let usersWithoutRoles = 0;
    
    for (const user of allUsers) {
      const userRoles = await getUserRoles(user);
      if (userRoles.length === 0) {
        usersWithoutRoles++;
      }
    }
    
    return {
      success: true,
      data: {
        system: {
          totalUsers: totalUsers,
          totalRoles: totalRoles,
          usersWithoutRoles: usersWithoutRoles,
          timestamp: new Date().toISOString()
        },
        roleBreakdown: roleStats,
        summary: {
          activeUsers: totalUsers - usersWithoutRoles,
          rolesCoverage: totalUsers > 0 ? 
            ((totalUsers - usersWithoutRoles) / totalUsers * 100).toFixed(1) + '%' : '0%',
          recommendations: usersWithoutRoles > 0 ? 
            [`‡∏°‡∏µ ${usersWithoutRoles} users ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ role - ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ admin role`] : 
            ['‡∏£‡∏∞‡∏ö‡∏ö roles ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥']
        },
        roleHierarchy: [
          'super_admin (Level 3) - ‡πÄ‡∏à‡πâ‡∏≤‡∏ô‡∏≤‡∏¢',
          'developer (Level 2) - ‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤',
          'admin (Level 1) - ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (role ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î)'
        ]
      },
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('‚ùå Error getting system stats:', error);
    throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, error.message);
  }
});

// üîß Cloud Function: ‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
Parse.Cloud.define('systemMaintenance', async (request) => {
  const { action } = request.params;
  
  try {
    console.log(`üîß Running system maintenance: ${action}`);
    
    const results = {};
    
    if (action === 'cleanup' || action === 'all') {
      // ‡∏•‡∏ö roles ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ users
      const roleQuery = new Parse.Query(Parse.Role);
      const allRoles = await roleQuery.find({ useMasterKey: true });
      const protectedRoles = ['super_admin', 'developer', 'admin'];
      const emptyRoles = [];
      
      for (const role of allRoles) {
        const roleName = role.get('name');
        if (!protectedRoles.includes(roleName)) {
          const usersCount = await role.getUsers().query().count({ useMasterKey: true });
          if (usersCount === 0) {
            await role.destroy({ useMasterKey: true });
            emptyRoles.push(roleName);
          }
        }
      }
      
      results.cleanup = {
        deletedEmptyRoles: emptyRoles,
        message: emptyRoles.length > 0 ? 
          `‡∏•‡∏ö ${emptyRoles.length} roles ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ users` : 
          '‡πÑ‡∏°‡πà‡∏°‡∏µ roles ‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö'
      };
    }
    
    if (action === 'assign_default_roles' || action === 'all') {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° users ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ role ‡πÄ‡∏Ç‡πâ‡∏≤ admin role
      const userQuery = new Parse.Query(Parse.User);
      const allUsers = await userQuery.find({ useMasterKey: true });
      const usersWithoutRoles = [];
      
      for (const user of allUsers) {
        const userRoles = await getUserRoles(user);
        if (userRoles.length === 0) {
          usersWithoutRoles.push(user);
        }
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ admin role
      const adminRoleQuery = new Parse.Query(Parse.Role);
      adminRoleQuery.equalTo('name', 'admin');
      const adminRole = await adminRoleQuery.first({ useMasterKey: true });
      
      if (adminRole && usersWithoutRoles.length > 0) {
        for (const user of usersWithoutRoles) {
          adminRole.getUsers().add(user);
        }
        await adminRole.save(null, { useMasterKey: true });
      }
      
      results.assign_default_roles = {
        assignedUsers: usersWithoutRoles.map(u => u.get('username')),
        count: usersWithoutRoles.length,
        message: usersWithoutRoles.length > 0 ? 
          `‡πÄ‡∏û‡∏¥‡πà‡∏° ${usersWithoutRoles.length} users ‡πÄ‡∏Ç‡πâ‡∏≤ admin role` : 
          '‡∏ó‡∏∏‡∏Å users ‡∏°‡∏µ role ‡πÅ‡∏•‡πâ‡∏ß'
      };
    }
    
    return {
      success: true,
      message: '‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
      data: results,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('‚ùå Error in system maintenance:', error);
    throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, error.message);
  }
});

console.log('‚úÖ Cloud Functions for Role Management loaded successfully');
// console.log('üìã Available Functions:');
// console.log('   üë• User Management:');
// console.log('      - getUserIds: ‡∏´‡∏≤ User IDs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° roles');
// console.log('      - checkUserRole: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role ‡∏Ç‡∏≠‡∏á user');
// console.log('      - getUsersWithoutRoles: ‡∏´‡∏≤ users ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ role');
// console.log('   üîß Role Management:');
// console.log('      - createRole: ‡∏™‡∏£‡πâ‡∏≤‡∏á role ‡πÉ‡∏´‡∏°‡πà');
// console.log('      - getAllRoles: ‡∏î‡∏π roles ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° users');
// console.log('      - addUserToRole: ‡πÄ‡∏û‡∏¥‡πà‡∏° user ‡πÄ‡∏Ç‡πâ‡∏≤ role');
// console.log('      - removeUserFromRole: ‡∏•‡∏ö user ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å role');
// console.log('      - changeUserRole: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role ‡∏Ç‡∏≠‡∏á user');
// console.log('      - clearUserRoles: ‡∏•‡πâ‡∏≤‡∏á roles ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á user');
// console.log('      - deleteRole: ‡∏•‡∏ö role ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö');
// console.log('   ‚öôÔ∏è System Management:');
// console.log('      - setupInitialRoles: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ roles ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô');
// console.log('      - getSystemStats: ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö');
// console.log('      - systemMaintenance: ‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏∞‡∏ö‡∏ö');
// console.log('');
// console.log('üèÜ Role Hierarchy:');
// console.log('   1Ô∏è‚É£ admin (Level 1) - Role ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î - ‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß');
// console.log('   2Ô∏è‚É£ developer (Level 2) - CRUD ‡πÑ‡∏î‡πâ‡∏´‡∏°‡∏î');
// console.log('   3Ô∏è‚É£ super_admin (Level 3) - ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏´‡∏°‡∏î + ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ roles');